#!/bin/bash


if [[ $# < 2 ]]; then
    echo "Incorrect number of arguments"
    echo "Usage:"
    echo "    create-CXX-project projectName projectFolderLocation"
    echo "--OR--"
    echo "    create-CXX-project projectName ."
    echo "-- for a project in current folder"
    exit
fi


## -- create-CXX-project

## -- this is what is needed to make
## -- appropriate folder names for either
## -- user home extended foler
## -- or current folder
## -- DOT has to be tested first because
## -- DOT is a legal folder for bash -d

if [[ $2 == "." ]]; then
    myhome=$PWD/$1
elif [[ -d /home/$USER/$2 ]]; then
    myhome=/home/$USER/$2/$1
else
    echo "Something went wrong.  Exiting."
    exit
fi


## -- writing main.c
echo "Writing project to current folder"
mkdir $myhome
cd $myhome
echo "Writing main.c"
echo "#include <stdio.h>" >> main.c
echo " " >> main.c
echo "int main(int argc, char* argv[])" >> main.c
echo "{" >> main.c
echo "    printf(\"Hello World!\\n\");" >> main.c
echo "    return 0;" >> main.c
echo "}" >> main.c
## -- writing CMakeLists.txt 

echo "creating build folder"
mkdir build

echo "Writing CMakeLists.txt file"
echo "cmake_minimum_required(VERSION 3.25 )" >> CMakeLists.txt
echo "project("$1" C)" >> CMakeLists.txt
echo "" >> CMakeLists.txt
echo "set(CMAKE_C_STANDARD 11)" >> CMakeLists.txt
echo "" >> CMakeLists.txt
echo "add_executable("$1" main.c)" >> CMakeLists.txt

## -- writng clean script
echo "#!/bin/bash" >> clean
echo " " >> clean
echo "rm -rf build" >> clean
echo "mkdir build" >> clean

chmod +x clean

## -- writing build script
echo "#!/bin/bash" >> compile
echo "cd build" >> compile
echo " " >> compile
echo "    cmake .." >> compile
echo " " >> compile
echo "if [[ -f \"Makefile\" ]]; then" >> compile
echo "    make" >> compile
echo "else" >> compile
echo "    echo \"Makefile does not exist\"" >> compile
echo "    exit" >> compile
echo "fi" >> compile

chmod +x compile

echo "CXX Project complete"

